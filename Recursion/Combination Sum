class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> list=new ArrayList<>();
        combinations(candidates,target,list,new ArrayList<>(),0,0);
        return list;
    }

    public void combinations(int[] arr,int target,List<List<Integer>> list,ArrayList<Integer> com,int sum,int i)
    {
        if(i==arr.length || sum==target)
        {
            if(sum==target)
            {
                list.add(new ArrayList<>(com));
            }
            return ;
        }
        ArrayList<Integer> include=new ArrayList<>(com);
        include.add(arr[i]);
        int newSum=sum+arr[i];
        if(newSum<=target)
        {
            combinations(arr,target,list,include,newSum,i);
        }
        combinations(arr,target,list,new ArrayList<>(com),sum,i+1);
    }
}
