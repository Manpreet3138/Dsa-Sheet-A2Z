import java.util.*;
public class Solution{
    static class Stack {
        private Queue<Integer> q1=new LinkedList<>();
        private Queue<Integer> q2=new LinkedList<>();

        public Stack() {
            // Implement the Constructor.
        }

        /*----------------- Public Functions of Stack -----------------*/

        public int getSize() {
           return q1.size();
        }

        public boolean isEmpty() {
            return q1.isEmpty() && q2.isEmpty();
        }

        public void push(int element) {
            q1.add(element);
        }

        public int pop() {
            if(q1.isEmpty()) return -1;
            while(q1.size()>1) q2.add(q1.remove());
            int popped=q1.remove();
            Queue<Integer> temp = q1;
            q1 = q2;
            q2 = temp;

            return popped;
        }

        public int top() {
            if (q1.isEmpty()) return -1;

        while (q1.size() > 1) {
            q2.add(q1.remove());
        }

        int top = q1.remove();
        q2.add(top); // push it back into q2

        // Swap queues
        Queue<Integer> temp = q1;
        q1 = q2;
        q2 = temp;

        return top;
        }
    }
}
