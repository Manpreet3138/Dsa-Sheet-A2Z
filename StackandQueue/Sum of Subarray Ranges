import java.util.*;
public class Solution {
    public static int rangeSum(int []arr){
        
        int n=arr.length;

        int[] ple=new int[n];
        int[] nle=new int[n];

        int[] pge=new int[n];
        int[] nge=new int[n];

        Stack<Integer> stk=new Stack<>();
        Stack<Integer> stk1=new Stack<>();

        for(int i=0;i<n;i++)
        {
            while(!stk.isEmpty() && arr[stk.peek()]>arr[i]) stk.pop();
            ple[i]=stk.isEmpty()?(i+1):(i-stk.peek());
            stk.push(i);

            while(!stk1.isEmpty() && arr[stk1.peek()]<arr[i]) stk1.pop();
            pge[i]=stk1.isEmpty()?(i+1):(i-stk1.peek());
            stk1.push(i);
        }

        stk.clear();
        stk1.clear();

        for(int i=n-1;i>=0;i--)
        {
            while(!stk.isEmpty() && arr[stk.peek()]>=arr[i]) stk.pop();
            nle[i]=stk.isEmpty()?(n-i):(stk.peek()-i);
            stk.push(i);

            while(!stk1.isEmpty() && arr[stk1.peek()]<=arr[i]) stk1.pop();
            nge[i]=stk1.isEmpty()?(n-i):(stk1.peek()-i);
            stk1.push(i);
        }

        long res = 0;
        for (int i = 0; i < n; i++) {
            long maxContribution = (long) arr[i] * pge[i] * nge[i];
            long minContribution = (long) arr[i] * ple[i] * nle[i];
            res += maxContribution - minContribution;
        }

        return (int)res;
    }
}
